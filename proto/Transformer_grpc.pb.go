// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TransformerClient is the client API for Transformer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TransformerClient interface {
	GetName(ctx context.Context, in *GetNameRequest, opts ...grpc.CallOption) (*GetNameResponse, error)
	GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*GetDescriptionResponse, error)
	GenerateDependencies(ctx context.Context, in *GenerateDependenciesRequest, opts ...grpc.CallOption) (*GenerateDependenciesResponse, error)
}

type transformerClient struct {
	cc grpc.ClientConnInterface
}

func NewTransformerClient(cc grpc.ClientConnInterface) TransformerClient {
	return &transformerClient{cc}
}

func (c *transformerClient) GetName(ctx context.Context, in *GetNameRequest, opts ...grpc.CallOption) (*GetNameResponse, error) {
	out := new(GetNameResponse)
	err := c.cc.Invoke(ctx, "/proto.Transformer/GetName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) GetDescription(ctx context.Context, in *GetDescriptionRequest, opts ...grpc.CallOption) (*GetDescriptionResponse, error) {
	out := new(GetDescriptionResponse)
	err := c.cc.Invoke(ctx, "/proto.Transformer/GetDescription", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *transformerClient) GenerateDependencies(ctx context.Context, in *GenerateDependenciesRequest, opts ...grpc.CallOption) (*GenerateDependenciesResponse, error) {
	out := new(GenerateDependenciesResponse)
	err := c.cc.Invoke(ctx, "/proto.Transformer/GenerateDependencies", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TransformerServer is the server API for Transformer service.
// All implementations must embed UnimplementedTransformerServer
// for forward compatibility
type TransformerServer interface {
	GetName(context.Context, *GetNameRequest) (*GetNameResponse, error)
	GetDescription(context.Context, *GetDescriptionRequest) (*GetDescriptionResponse, error)
	GenerateDependencies(context.Context, *GenerateDependenciesRequest) (*GenerateDependenciesResponse, error)
	mustEmbedUnimplementedTransformerServer()
}

// UnimplementedTransformerServer must be embedded to have forward compatible implementations.
type UnimplementedTransformerServer struct {
}

func (UnimplementedTransformerServer) GetName(context.Context, *GetNameRequest) (*GetNameResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetName not implemented")
}
func (UnimplementedTransformerServer) GetDescription(context.Context, *GetDescriptionRequest) (*GetDescriptionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescription not implemented")
}
func (UnimplementedTransformerServer) GenerateDependencies(context.Context, *GenerateDependenciesRequest) (*GenerateDependenciesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateDependencies not implemented")
}
func (UnimplementedTransformerServer) mustEmbedUnimplementedTransformerServer() {}

// UnsafeTransformerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TransformerServer will
// result in compilation errors.
type UnsafeTransformerServer interface {
	mustEmbedUnimplementedTransformerServer()
}

func RegisterTransformerServer(s grpc.ServiceRegistrar, srv TransformerServer) {
	s.RegisterService(&Transformer_ServiceDesc, srv)
}

func _Transformer_GetName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).GetName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transformer/GetName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).GetName(ctx, req.(*GetNameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_GetDescription_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).GetDescription(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transformer/GetDescription",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).GetDescription(ctx, req.(*GetDescriptionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Transformer_GenerateDependencies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateDependenciesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TransformerServer).GenerateDependencies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Transformer/GenerateDependencies",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TransformerServer).GenerateDependencies(ctx, req.(*GenerateDependenciesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Transformer_ServiceDesc is the grpc.ServiceDesc for Transformer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Transformer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Transformer",
	HandlerType: (*TransformerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetName",
			Handler:    _Transformer_GetName_Handler,
		},
		{
			MethodName: "GetDescription",
			Handler:    _Transformer_GetDescription_Handler,
		},
		{
			MethodName: "GenerateDependencies",
			Handler:    _Transformer_GenerateDependencies_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Transformer.proto",
}
